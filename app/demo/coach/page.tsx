"use client"

import type React from "react"

import { useState } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Badge } from "@/components/ui/badge"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Avatar, AvatarFallback } from "@/components/ui/avatar"
import { Brain, Send, Clock, ArrowLeft } from "lucide-react"
import Link from "next/link"

const demoResponses = [
  "–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! ü§î –î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º —ç—Ç–æ –≤–º–µ—Å—Ç–µ. –ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞—Å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –±–µ—Å–ø–æ–∫–æ–∏—Ç –≤ —ç—Ç–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏?",
  "–Ø –ø–æ–Ω–∏–º–∞—é –≤–∞—à–∏ —á—É–≤—Å—Ç–≤–∞. üíô –≠—Ç–æ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ - —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è —Ç–∞–∫ –≤ –ø–æ–¥–æ–±–Ω—ã—Ö –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞—Ö. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –±–æ–ª—å—à–µ –æ —Ç–æ–º, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç.",
  "–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! üåü –í—ã —É–∂–µ –¥–µ–ª–∞–µ—Ç–µ –≤–∞–∂–Ω—ã–µ —à–∞–≥–∏. –ö–∞–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã –∑–∞–º–µ—Ç–∏–ª–∏ –æ—Ç —Å–≤–æ–∏—Ö —É—Å–∏–ª–∏–π?",
  "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –º—ã—Å–ª—å! üí° –ê —á—Ç–æ, –µ—Å–ª–∏ –º—ã –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —ç—Ç–æ —Å –¥—Ä—É–≥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã? –ö–∞–∫–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤—ã –≤–∏–¥–∏—Ç–µ –≤ —ç—Ç–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏?",
  "–ü–æ–Ω–∏–º–∞—é, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–æ–∂–Ω–æ. ü§ù –î–∞–≤–∞–π—Ç–µ –Ω–∞–π–¥–µ–º –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —à–∞–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –≤–∞–º –¥–≤–∏–≥–∞—Ç—å—Å—è –≤–ø–µ—Ä–µ–¥. –ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å?",
]

export default function DemoCoachPage() {
  const [messages, setMessages] = useState([
    {
      id: "1",
      role: "assistant" as const,
      content:
        "–ü—Ä–∏–≤–µ—Ç! üëã –ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–ª–µ–∫—Å, –∏ —è –≤–∞—à –¥–µ–º–æ –ò–ò –∫–æ—É—á. –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º –≤ –ª–∏—á–Ω–æ—Å—Ç–Ω–æ–º —Ä–∞–∑–≤–∏—Ç–∏–∏.\n\n–≠—Ç–æ –¥–µ–º–æ-–≤–µ—Ä—Å–∏—è, –ø–æ—ç—Ç–æ–º—É –º–æ–∏ –æ—Ç–≤–µ—Ç—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã, –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞—Å—Ç–æ—è—â–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞!\n\n–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç –∏–ª–∏ –Ω–∞–¥ —á–µ–º –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å? ü§î",
      timestamp: new Date(),
    },
  ])
  const [input, setInput] = useState("")
  const [isLoading, setIsLoading] = useState(false)

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    if (!input.trim() || isLoading) return

    const userMessage = {
      id: Date.now().toString(),
      role: "user" as const,
      content: input,
      timestamp: new Date(),
    }

    setMessages((prev) => [...prev, userMessage])
    setInput("")
    setIsLoading(true)

    // –°–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –æ—Ç–≤–µ—Ç–∞
    setTimeout(() => {
      const randomResponse = demoResponses[Math.floor(Math.random() * demoResponses.length)]
      const assistantMessage = {
        id: (Date.now() + 1).toString(),
        role: "assistant" as const,
        content: randomResponse,
        timestamp: new Date(),
      }
      setMessages((prev) => [...prev, assistantMessage])
      setIsLoading(false)
    }, 1500)
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white border-b sticky top-0 z-50">
        <div className="container mx-auto px-4 py-3 flex items-center justify-between">
          <div className="flex items-center gap-4">
            <Link href="/demo">
              <Button variant="ghost" size="sm">
                <ArrowLeft className="h-4 w-4 mr-2" />
                –ù–∞–∑–∞–¥
              </Button>
            </Link>
            <div className="flex items-center gap-2">
              <Brain className="h-8 w-8 text-blue-600" />
              <span className="text-2xl font-bold text-gray-900">NeuroCoach</span>
            </div>
          </div>
          <Badge variant="secondary" className="bg-yellow-100 text-yellow-800">
            –î–ï–ú–û –†–ï–ñ–ò–ú
          </Badge>
        </div>
      </header>

      <div className="container mx-auto px-4 py-8 max-w-4xl">
        {/* Coach Header */}
        <Card className="mb-6">
          <CardHeader>
            <div className="flex items-center gap-3">
              <Avatar className="h-12 w-12">
                <AvatarFallback className="bg-blue-100 text-blue-600">
                  <Brain className="h-6 w-6" />
                </AvatarFallback>
              </Avatar>
              <div>
                <CardTitle className="flex items-center gap-2">
                  –ê–ª–µ–∫—Å - –≤–∞—à –¥–µ–º–æ –ò–ò –∫–æ—É—á
                  <Badge variant="secondary">
                    <Brain className="h-4 w-4 mr-1" />
                    –î–µ–º–æ —Å–µ—Å—Å–∏—è
                  </Badge>
                </CardTitle>
                <CardDescription>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–æ–±—â–∞—Ç—å—Å—è —Å –ò–ò –∫–æ—É—á–µ–º –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ</CardDescription>
              </div>
            </div>
          </CardHeader>
        </Card>

        {/* Chat */}
        <Card className="h-[600px] flex flex-col">
          <CardHeader className="pb-3">
            <CardTitle className="text-lg flex items-center gap-2">
              <Brain className="h-5 w-5" />
              –î–∏–∞–ª–æ–≥ —Å –∫–æ—É—á–µ–º
              <div className="flex items-center gap-2 text-sm text-gray-500 ml-auto">
                <Clock className="h-4 w-4" />
                {new Date().toLocaleTimeString("ru-RU", { hour: "2-digit", minute: "2-digit" })}
              </div>
            </CardTitle>
          </CardHeader>
          <CardContent className="flex-1 flex flex-col">
            <ScrollArea className="flex-1 pr-4">
              <div className="space-y-4">
                {messages.map((message) => (
                  <div
                    key={message.id}
                    className={`flex gap-3 ${message.role === "user" ? "justify-end" : "justify-start"}`}
                  >
                    {message.role === "assistant" && (
                      <Avatar className="h-8 w-8 mt-1">
                        <AvatarFallback className="bg-blue-100 text-blue-600 text-xs">
                          <Brain className="h-4 w-4" />
                        </AvatarFallback>
                      </Avatar>
                    )}
                    <div
                      className={`max-w-[80%] rounded-lg px-4 py-2 ${
                        message.role === "user" ? "bg-blue-600 text-white" : "bg-gray-100 text-gray-900 border"
                      }`}
                    >
                      <p className="text-sm leading-relaxed whitespace-pre-wrap">{message.content}</p>
                      <span className="text-xs opacity-70 mt-1 block">
                        {message.timestamp.toLocaleTimeString("ru-RU", {
                          hour: "2-digit",
                          minute: "2-digit",
                        })}
                      </span>
                    </div>
                    {message.role === "user" && (
                      <Avatar className="h-8 w-8 mt-1">
                        <AvatarFallback className="bg-green-100 text-green-600 text-xs">–£</AvatarFallback>
                      </Avatar>
                    )}
                  </div>
                ))}
                {isLoading && (
                  <div className="flex gap-3 justify-start">
                    <Avatar className="h-8 w-8 mt-1">
                      <AvatarFallback className="bg-blue-100 text-blue-600 text-xs">
                        <Brain className="h-4 w-4" />
                      </AvatarFallback>
                    </Avatar>
                    <div className="bg-gray-100 rounded-lg px-4 py-2 border flex items-center gap-2">
                      <span className="text-sm text-gray-500">–ê–ª–µ–∫—Å –ø–µ—á–∞—Ç–∞–µ—Ç</span>
                      <div className="flex space-x-1">
                        <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                        <div
                          className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"
                          style={{ animationDelay: "0.1s" }}
                        ></div>
                        <div
                          className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"
                          style={{ animationDelay: "0.2s" }}
                        ></div>
                      </div>
                    </div>
                  </div>
                )}
              </div>
            </ScrollArea>

            {/* Input */}
            <form onSubmit={handleSubmit} className="flex gap-2 mt-4">
              <Input
                value={input}
                onChange={(e) => setInput(e.target.value)}
                placeholder="–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç..."
                className="flex-1"
                disabled={isLoading}
              />
              <Button type="submit" disabled={isLoading || !input.trim()}>
                <Send className="h-4 w-4" />
              </Button>
            </form>
          </CardContent>
        </Card>

        {/* Demo Notice */}
        <Card className="mt-6 bg-blue-50 border-blue-200">
          <CardContent className="pt-6">
            <div className="text-center">
              <Brain className="h-8 w-8 text-blue-600 mx-auto mb-2" />
              <h3 className="font-medium mb-2">–î–µ–º–æ —Ä–µ–∂–∏–º</h3>
              <p className="text-sm text-gray-600 mb-4">
                –≠—Ç–æ –¥–µ–º–æ-–≤–µ—Ä—Å–∏—è –ò–ò –∫–æ—É—á–∞. –í –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∫–æ—É—á –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –∏ –ø–æ–º–Ω–∏—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤—Å–µ—Ö
                –≤–∞—à–∏—Ö —Å–µ—Å—Å–∏–π.
              </p>
              <Link href="/auth/signup">
                <Button>–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø</Button>
              </Link>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  )
}
